/* This variable will store the height of the div that contains the navbar. I may change this to "vh" or "vw" units
to make it responsive. */
$navbar-height: 88px;

/* This will store the height of the navbar plus the 3.5 px of padding top and 3.5 px
of padding bottom that I added to the navbar on every page except the home (
to center the logo in the navbar in the black background of the navbar).
) */
$navbar-height-extended: 95px;

/* The padding between the borders of the browser and any text or element inside the website must be a minimum of 20px.
So, I will add 2 Sass variables that will add up to 20px in padding horizontally. */
$edge-navbar-padding: 9px;
$internal-navbar-padding: 0 11px;

/* This will be used as the left and right margins for the grids in the bodies with a white background for all of the pages. */
$edge-body-padding: 20px;

/* This will add 20px of horizontal padding with no vertical padding (since side margins should be at least 20px) */
$side-margins: 0 20px;

/* These will be the side margins for larger screens. I could make it either a fixed size (with px), or responsive
(with rem or something similar.) Don't use "em", since it gives me a bug with the side margins for the 
"Back to top" text.   */
$side-margins-large: 0 3rem; 

/* Shade of gray for the paragraph text for body sections with a white background.

I originally used #312B2B, but it was too dark, to the point it looked like black. That is, it looked like 
the same color of the h1 and h2 titles, whereas, in reality, it needs to be clearly lighter than the titles
since paragraph text has less priority than the titles. I will use #7a6f6f, since it's lighter.

Upon further consideration I decided to use the shade "Jet" (#131516), since it has better contrast with 
a white background, so it's easier to read (source: https://www.viget.com/articles/color-contrast/ .)*/
$gray-text: #131516;

/* Shade of gray for the h2 titles (like the titles for the videos in the Portfolio page) */
$gray-text-h2-titles: #242121;

/* This stores the Arial font */
$arial-font: Arial, Helvetica, sans-serif;

/* This stores the Kameron font, which will be used for titles */
$title-font: "Kameron", serif;

/* This will be the minimum width that I will use to consider a screen to be a computer screen */
$computer-min-width: 1279px;

/* This is the maximum height that I will use to consider a screen to be a phone screen in horizontal mode */
$horizontal-phone-height: 450px;

/* If a screen has this width or higher, I  will consider it a tablet screen */
$tablet-min-width: 767px;

/* This is the minimum width to be wider than an iPhone 5 or 5S in vertical mode (320px) */
$wider-than-iphone5-min-width: 321px;

/* This is the maximum height size for an iPhone 5 on horizontal mode (320px) */
$iphone5-max-height-horizontal: 320px;

/* This is the maximum height size for an iPhone 5 on vertical mode (568px) */
$iphone5-max-height-vertical: 568px;

// Minimum height to have an iPhone higher than an iPhone 5 on vertical mode
$higher-than-iphone5-min-height: 569px;

/* This is the minimum height that is higher than an iPhone SE in horizontal mode */
$iphone-se-max-height-horizontal: 376px;

/* Font size of the gray text */
$gray-text-size: 20px;

/* These 2 lines will store the size of the social media icons */
$social-media-icon-large: 64px;
$social-media-icon-small: 50px;

/* These variables will store the font size of the black h1 titles in different screen sizes */
$h1-size-phones-vertical: 2rem; // For phones in vertical mode
$h1-size-phones-horizontal: 2rem;  // For phones in horizontal mode
$h1-size-tablets: 3rem;  // For tablets
$h1-size-computer: 4vw;  // For computers

/* These variables will store the font size of the h2 titles in different screen sizes. 
These should be SMALLER than the h1 sizes that I specified above. */
$h2-size-phones-vertical: 1rem; // For phones in vertical mode
$h2-size-phones-horizontal: 1rem;  // For phones in horizontal mode
$h2-size-tablets: 1.5rem;  // For tablets
$h2-size-computer: 1.5vw;  // For computers

/* These variables will store the font size of the paragraphs for small and large screens   */
$font-size-small-screens: 16px;
$font-size-large-screens: 20px;

/*These variables will store the size for the contact page icons */
$contact-icon-size-small-screens: 40px;
$contact-icon-size-large-screens: 78px;

/* This snippet of code will be reused at least 2 times, and it will create a 1x2 grid (1 row, 2 columns) in which a 
div will be split into a right and a left half. This needs to be combined with other classes that contain a "flex: 50%" 
in order to create the  1x2 grid */
%grid {

  /* This will add a minimum of 20px of side margins to the whole div. I want to make this responsive.
  
  If I can't insert a media query in here for being Sass' inheritance tool, I will delete this, and I
  will manually add the media queries for each screen size. */
    /* For phones in vertical mode */
    @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
      margin: $side-margins;
    }
  
    /* For phones in horizontal mode */
    @media only screen and (max-height: $horizontal-phone-height) {
      margin: $side-margins-large;
    }
  
    /* For tablets. */
    @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width)
    and (min-height: $horizontal-phone-height) {
      margin: $side-margins-large;
    }
  
    // For computer screens
    @media only screen and (min-width: $computer-min-width) {
      margin: $side-margins-large;
    }
  // margin: 0 20px; 

  /* This will allow me to split this div into two halves (right and left) in large screens, but it will also make it responsive
  so that both halves appear one on top of the other in small screeens (source: 
  https://www.w3schools.com/css/tryit.asp?filename=trycss3_flexbox_responsive) */
  display: flex;
  flex-direction: row;
}

/* This will make the <body> tag to occupy the entire screen, and will remove all margins from it. This way, there won't
be any white borders surrounding the body nor the image if the landing page.
Source: https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_div_full_height */
html, body {
  height: 100%;

  /* This fixed the bug that made the html and body tag to be 17 px thinner than the actual viewport width, but
  it creates a horizontal overflow, for some reason */
  // width: 100vw;
  margin: 0;
}
  
/* This modifies the styles of the landing page (the top of the home page, the part of the page the user
will see when they first enter the website). 

The movie reel image needs to be here*/
#landing-page {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;

  /* This will add the landing page image. I needed to use the "linear gradient" property and put
  the "rgba" attribut twice to put the black mask. Otherwise, I would get either a white screen, or the
  black mask would never appear. 
  Source: https://css-tricks.com/tinted-images-multiple-backgrounds/ 
  
  I used a lower quality version of the image to make the background image load way faster.

  Source of the background image: https://unsplash.com/photos/xq1eWTas_a0 */
  background: 
    linear-gradient(
    rgba(0, 0, 0, 0.65), 
    rgba(0, 0, 0, 0.65)
    ),
    url(../img/landing-page-bg-medium.jpg);

  /* This makes the images to be resized so that it fits the browser window. 
  
  In order for the image to appear in the proper size and not get cropped on a laptop screen, I need to manually specify
  the size screen. I can't use "100%". And anyways, even if I used "100%", the image would get cropped or would get
  repeated and look bad in all other screen sizes anyways.
  
  I will use media queries to make the movie reel image to look well on different screen sizes.
  
  The image is no longer zoomed-in in a lptop screen of 1366px of width if I use "100% 100%" as the width and height
  of the image in the "background-size" property. */
  // For laptop, and desktop screens with a min width of 801px
  @media only screen and (min-width: 801px) {
      background-size: 100% 100%;
  }

  // // For screens with a width larger than 1366px
  // @media only screen and (min-width: 1536px) {
  //     background-size: 100% 100%;
  // }

  /* background-color: black; */
  /* This will make the landing page div to be the same height and width of the <body> tag. */
  height: 100%;

  /* For smartphone screens. If I set the height of the image to 100%, and I set "px" units to its
  width, I will get more or less the effect that I want for smaller screens.
  
  I need to find out if there's a way to the image horizontally so that I get the specific portion of the image
  that I want to show.
  
  This only works as intended if I put this below the "height" property (source: 
  https://www.w3schools.com/cssref/pr_background-position.asp .) */
  @media only screen and (max-width: $tablet-min-width) {
    background-position:right 5%;
    background-size: 1000px 100%; 
  }

  /* For tablet screens with a min width of 768px and a max width of 800px.
  
  I choose 1024px since, if you multiply 728 times 2, you get 1536. Now, a third of 1536 is 512. If you subtract
  512 to 1536 you get 1024px. That is, if you stretch the image to be double of an iPad screen, and then you subtract
  a third of it, that's what will be shown on tablet screens. 
  
  If I showed only half of the image, it wouldn't look good. I decided to show two-thirds of the image to make it look good. */
  @media only screen and (min-width: 768px) and (max-width: 800px) {
    background-position:right 0;
    background-size: 1024px 100%; 
  }
} // End of the landing page styles

/* This will be the landing page styles for any page other than the home page. This code WON'T contain the movie reel 
image.  */
.non-home-landing-page {

  /* I don't need this any longer */
  // display: flex;
  // justify-content: center;
  // align-items: center;
  // position: relative;

  /* background-color: black; */
  /* This will make the landing page div to be the same height and width of the <body> tag.
  I'M NOT SURE IF I'LL BE NEEDING THIS. 
  
  If I delete this, a bug occurs in which the h1 title of the page disappears. 
  FIX THIS BUG.
  
  Turns out that this will add the space between the navbar and the h1 title of the 
  page. That is, without this, the h1 title will be hidden behind the navbar. So, to
  fix this bug, I will make this height equivalent to the height of the navbar (88 px).
  
  This adds height to the div that contains the navbar, so it will push everything 
  downwards to prevent anything from hiding behind the navbar.  */
  height: $navbar-height-extended;

} // End of the non-home landing page styles
  
  /* Style sheet of the "Check our Portfolio" button */
  #portfolio-button {

    /* This will remove the blue text and the underline from the button (source: 
    https://www.codegrepper.com/code-examples/css/how+to+remove+the+blue+link+color+in+html) */
    a {
      text-decoration: none; 
      color: inherit;
    }

    color: white;
    
    border: 1px solid white;  /* This adds a white border to the button */
    background-color: transparent;  /* This makes the interior of the button to be transparent  */
    cursor: pointer;  /* This makes a hand appear when the user hovers the mouse over the button */
    border-radius: 5px; /* This will add rounded corners to the button */

    /* This will add padding within the button, and establish the size of the text */
    // In tablet and computer screens 
    @media only screen and (min-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
      padding: 15px;
      font-size: 24px;
    }

    // In phone screens in vertical mode
    @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
      padding: 1vh;
      font-size: 3vh;
    }

    // In phone screens in horizontal mode
    @media only screen and (max-height: $horizontal-phone-height) {
      padding: 1vw;
      font-size: 2.5vw;
    }

    /* I will temporarily add a margin at the bottom of the button so that I can see how the white border looks
    on a black screen (the default background color of the page is white) */
    margin-bottom: 10px;

    /* text-align: center; */
  }
  
/* This will center the "Check our portfolio" button. Source: 
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_center-flex_btn */
.center-content {
  display: flex;
  justify-content: center;
  align-items: center;

  /* This will remove any padding that the button would add that would otherwise prevent the h1 title from being at
  the center of the landing page. With this I'll be able to move around the button on the "landing page" div. */
  position: absolute;

  /* By modifying the bottom, top, left and right properties, I should be able to move the button towars the bottom
  of the screen (source: https://stackoverflow.com/questions/36191516/center-and-bottom-align-flex-items .)
  
  I will make it responsive, so I need to remove the "px" value and use a responsive value (like vh or vw .) */
  bottom: 8vh;
}
  
  /* This should move the "check our portfolio button" to the center of the page */
  /* div#portfolio-button {
      text-align: center;
  } */
  /* This will change the color of the "check our portfolio" button to white if the user moves the mouse over it. */
  #portfolio-button:hover {
    background-color: white;
    color: black;
  }
  
  /* This styles the h1 title of the homepage */
  #home-title {
    color: white;

    /* This sets the font to Arial */
    font-family: $arial-font;

    /* The unit "vw" or "vh" will make the text size to be responsive. This way, the text will automatically become smaller 
    in smaller screens.
    
    I will most likely make the text change based on the browser height instead of its width, since I want the movie reel
    image to occupy the entire height of the viewport when the users 1st enter the page, so I want the text to have its
    size to look big when they 1st enter the homepage. 
    
    With a font size of 1.5vh, the title text looks good on most screen sizes, with the onluy exception of laptop screens.
    So, I will use a media query, and use a "2vw" on screens larger than tablets so that the text looks big enough
    in laptop screens.*/

    // For small screens in vertical mode
    @media only screen and (max-width: $computer-min-width) and (min-height: $horizontal-phone-height) {
        font-size: 1.7vh;
    }

    // For small screens in horizontal mode
    @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
      font-size: 1.8vw;
    }

    // For laptop screens
    @media only screen and (min-width: $computer-min-width) {
        font-size: 1.8vw;
    }

    /* The div should have at least 20px of side margins at all times */
    margin: $side-margins;
    
    /* This will make it so that the title of the homepage is divided into 3 lines in the desktop version of the page.
    Source: https://jsfiddle.net/hr6hq7uj/1/ */
    /* max-width: 650px;
    display: inline-block; */
  }
  
  /* This only affects the div that contains the h1 title of the homepage. */
div#home-title {

  /* This will add a padding to the top of the div so that there is enough space between the navbar and the h1
  title. It needs to be responsive, since different screen sizes will need different padding values. Also, 
  with this, I'll be able to remove the temporary "br" tags that I used on index.html. 
  
  Since what will ultimately tell me how much padding I'll need is the height of the viewport, I'll use "vh"
  as the measuring unit.*/
  // padding-top: 20vh;

  /* This will make it so that the title of the homepage is divided into 3 lines in the desktop version of the page, 
  by reducing the size of the div container that contains the h1 title.
  Source: https://jsfiddle.net/hr6hq7uj/1/ 
  
  I need to use media queries in this in order to have control in the number of words that will appear
  per line for the h1 title on different screen sizes. 800px is ok for screens with 1366px of width, whereas
  900px is ok for screens of 1536px of width.*/

  // For screens wider than 1536 px
  @media only screen and (min-width: 1536px) {
      max-width: 1100px;
  }

  // For screens of up to 1366 px of width
  @media only screen and (max-width: 1366px) {
      max-width: 980px;
  }
  /* This moves aligns the text to the center of the div container. */
  text-align: center;

  /* This will make it so that the h1 title remains at the center of the "landing page" div. Tha is, the 
  h1 title will be centered both vertically and horizontally. */
  display: flex;
}
  
/* This should remove all text decoration (underlines and blue text) for the navbar elements without needing to 
put 2 CSS selectors for the unvisited and the visited links. */
.navbar li a {
  text-decoration: none;
  color: white;
  /* This should change the font of the navbar elements to Kameron */
  font-family: $title-font;
  /* This will add some padding to the navbar so that the main title of the landing page is way below the navbar.
  The minimum horizontal padding that must exist between the navbar elements on the edges of the navbar and the left and
  right margins should be of 20px (the 2nd parameter in "padding").
  Source: https://www.w3schools.com/css/tryit.asp?filename=trycss_navbar_horizontal_gray . 
  
  After further consideration, and by looking at my wireframes, it would be better to reduce the vertical padding from
  15px so that the navbar is closer to the top edge of the browser. And ideally, this should be responsive, and I shouldn't
  be using "px". However, for the time being, I may leave the vertical padding with "px" units. 
  
  To perfectly align the small navbar elements with the Nova logo, I need to remove any vertical padding from the navbar, 
  so I'll make the 1st parameter of the padding 0. */
  display: block;

  /* 12 px of horizontal padding looks good on laptop screens (it looks like my wireframe.) I may need to edit this later
  to make this padding responsive, though. */
  padding: $internal-navbar-padding;
}

/* This will vertically center the hamburger menu icon so that it gets aligned to the vertical center of the navbar. */
.hamburger-icon {
  /* This vertically centers hamburger icon within the navbar (source: https://www.w3schools.com/css/css_align.asp) */
  line-height: $navbar-height; 
}

  
/* This should arrange all elements of the navbar horizontally, that is, so that they are each to the side of the other  */
.navbar li {
  /* This turns a vertical list into a horizontal one */
  /* display: inline; */
  /* If I don't use "display inline", this will turn a vertical lsit into a horizontal one, but the navbar
  elements will be in the reverse order */
  float: right;
}
  
  /* This also modifies the style sheets of the navbar elements. */
  .navbar ul {
    /* This removes the bullet points from the navbar elements */
    list-style-type: none;
    /* This removes the padding that was to the left of the "Nova Video Productions" title on the navbar */
    padding-left: 0;
    /* This fixes a bug in which there was a vertical overflow in which a white rectangle appeared at the top of the 
    screen on the web browser, just above the navbar */
    margin: 0;
  }
  
  /* This will modify the CSS of the "Nova Video Productions" title in the navbar */
  .navbar .company-logo {
    /* This makes the title to go to the far left of the navbar */
    float: left;
    font-size: 35px;
    /* This will make it so that "Productions" appears below "Nova Video". I can't use "display: inline-block" because
    it will have a conflict with the "float: left" from above.
    Source: https://jsfiddle.net/hr6hq7uj/1/ */
    max-width: 255px;
    /* display: inline-block; */

    /* This will give additional horizontal padding so that the logo has 20 px of padding between itself and the left border 
    of the browser (as 20px is the minimum margin that there should be between the browser's window and any element.) */
    padding-left: $edge-navbar-padding;
  }
  
/* This will modify the style sheets of the small navbar links to other pages. */
.navbar-small-link li {
  font-size: 25px;

  /* This vertically centers the small navbar links (source: 
  https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_center-vertical .) 
  
  BUG: The problem is that all of the small elements are piled on top of each other, and are located
  right on top of the Nova logo. I need to separate them, and align them towards the right side of the screen.  */
  // margin: 0;
  // position: absolute;
  // top: 50%;
  // -ms-transform: translateY(-50%);
  // transform: translateY(-50%);

  /* This vertically centers the small navbar elements inside of the navbar without any bugs
  (source: Michiel van Oosterhout from https://stackoverflow.com/questions/8865458/how-do-i-vertically-center-text-with-css .)
  
  I need to put the line-height property as the same height of the navbar div so that all of the small navbar links are
  vertically centered. */
  line-height: $navbar-height;
  text-align: center;
  
}

.navbar {
  /* This will allow me to move around the navbar elements, and to prevent them from adding additional padding
  that would prevent the h1 title from being vertically aligned (source: 
  https://stackoverflow.com/questions/36191516/center-and-bottom-align-flex-items .) */
  position: absolute;

  width: 100%; 

  /* I may need to use "vh" or "vw" units for the height of the div in order to make the navbar height responsive */
  height: $navbar-height;

  /* By using "bottom", "top", "left" and "right", I'll be able to move the navbar around the landing page screen.
  
  EDIT LATER*/
  top: 0;

  /* I want to add at least 8px of padding top so that the space between the upper edge of the browser and the logo
  is of 8px. This seem to be a web design standard for vertical margins. Since the div that contains the logo is of
  44px in height if there's only 1 line of text, and the font should be of 35px in height, then there should be 9px
  of padding top and bottom. Therefore, I  need half of that (3.5px) to complete the 8px for the margin between the 
  upper edge of the browser and the logo
  
  And ideally, this should be responsive, so I may need to replace "px" by "vw" or another responsive unit. */
  padding-top: 3.5px;
}

/* This will add a black background to the navbar that will be used in every page 
except for the home page. */
.non-home-navbar {
  background-color: black;

  /* I will add 3.5 px of padding bottom since the original navbar has 3.5 px of padding
  top. So, by default, the navbar won't look centered if I add a black background. 
  Therefore, to made the navbar look centered with a black background, I need to add
  padding to the bottom of the navbar. */
  padding-bottom: 3.5px;
}

/* This will handle the styles of the side navbar. This will only be available on small screens (such as phone screens.) 

Source of most of this code: https://www.w3schools.com/howto/howto_js_sidenav.asp   

If I put "max width: 414px", the sidebar will be invisible in screens of 414px of width (like the iPhone 6). So, 
I will use "415px" of width for the media query. 

I ended up using a variable that stores a tablet's min width to specify that the hamburger menu icon should only appear
on phones, not in tablets. */
@media only screen and (max-width: $tablet-min-width) {
  /* The side navigation menu */
  .sidenavbar {
    height: 100%; /* 100% Full-height */
    width: 0; /* 0 width - change this with JavaScript */
    position: fixed; /* Stay in place */
    z-index: 1; /* Stay on top */
    top: 0; /* Stay at the top */
    right: 0; /* I want the menu to appear from the right side of the screen */
    background-color: #111; /* Black*/
    overflow-x: hidden; /* Disable horizontal scroll */
    padding-top: 60px; /* Place content 60px from the top */
    transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
  }

  /* The navigation menu links.
  
  I don't want to put the Nova logo inside of the side navbar. So, I will exclude the logo from it.
  
  This is what's going to make all of my side navbar elements to be aligned vertically.
  
  This only seems to work if I delete the "li" tags from the "small-navbar-links" class (which contains the small
  elements of the navbar). For this reason, I decided to add once again the 4 navbar links, but without a "li" tag, and 
  in a different order so that they appear on the right order if they're shown vertically. 
  
  I added 0px to the right since I will be adding the "X" button's padding on another CSS selector. 
  
  Then I added 24px to the left so that the navbar links have the same padding betheen the mand the edge of the sidebar as 
  my wireframe's. */
  .sidenavbar .sidenavbar-small-links a {
    padding: 8px 0px 12px 24px;
    text-decoration: none;
    font-size: 25px;
    color: white; /* CHANGE TO WHITE after I'm done with debugging. */
    display: block;
    transition: 0.3s;

    font-family: $title-font;
  }

  /* Position and style the close button (top right corner).
  
  I had a bug which didn't let me resize the "X" button. To fix it, I had to add the ".sidenavbar-small-links"
  class as a selector. */
  .sidenavbar .sidenavbar-small-links .closebutton {
    position: absolute;
    top: 0;
    right: 12px; /* This is the padding between the "X" button and the right edge of the screen */
    font-size: 36px;

    // margin-right: 50px; /* This margin is unnecessary */
  }



  /* These are the styles of the hamburger menu icon */
  .hamburger-icon {
    color: white; 

    /* This changes the size of the icon. If it's above 29 px, a bug will occur making the icon to get below the navbar
    in iPhone 5 and iPhone 5S screens. I should make it at east 29 px on screens of 320px of width. 
    
    FIX THIS BUG
    
    I used "vw" to make it responsive (dependent on the viewport's width.) 
    
    For thin screens, I could make it "9vw", whereas in wide screens, I could make it "9vh".
    
    Alternatively, I could simply use "%" as the unit. However, this causes a bug in iPhone 5 screens in vertical
    mode, so I'd rather use "vh" and "vw". */
    // For phones in vertical mode
    @media screen and (min-height: $horizontal-phone-height) {
      font-size: 9vw; 
    }

    // For phone screens in horizontal mode
    @media screen and (max-height: $horizontal-phone-height) {
      font-size: 9vh; 
    }
    
    /* I need to add at least 20px of margin between the edge of the screen and this icon. I WON'T use "padding" in
    here, since I need to use the "padding" property to fix the size of the border that will surround this icon. */
    margin-right: 20px;

    /* This adds a border with rounded edges to the icon (source: 
    https://www.w3schools.com/css/tryit.asp?filename=trycss_border_round ) */
    border: 1px solid white; /* Width of the border's line */
    border-radius: 5px; /* This determines how rounded the corners should be */
    padding: 1px 4px 0px 4px; /* This gives the padding between the icon and the borders */
    
    // padding-left: 4px;
    // padding-right: 4px;

    /* This is the class of the Font Awesome icon itself. Using this selector is the only way of adding a margin
    between the top of the screen and the icon. 
    
    I DON'T NEED THIS ANY LONGER. */
    // .fa-bars {
    //   margin-top: 30px;
    // }
  }

  /* I wanted to make the company logo's size to be responsive on phone screens, but I got a bug that altered the alignment
  of the logo, so that it wasn't vertically centered within the navbar.
  
  To fix the bug and make the logo smaller on phone screens, I decided to leave a fixed font size of 30px. Smaller font
  sizes make the aforementioned bug to reappear.*/
  .navbar .company-logo {
    font-size: 30px;
  }


  li.company-logo {
    /* This vertically centers the logo if I use a responsive size for its font: 
    (source: https://www.w3schools.com/css/tryit.asp?filename=trycss_align_padding).
    
    IT DOESN'T WORK. It just gives me 11px of top and bottom margin, giving me the illusion that it's centered.*/
    // padding: 11px 0;

    /* This should verticalle center multi-line elements (source: 
    https://www.w3schools.com/css/tryit.asp?filename=trycss_align_line-height) */

    line-height: $navbar-height;
    height: $navbar-height;

    line-height: 1.5;
    display: inline-block;
    vertical-align: middle;
  }

  // li.company-logo a {

  // }

  // .company-logo {
  //   position: absolute;
  //   padding: 1px 0px
  // }

}

/* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size).

This will make the navbar elements smaller if the user has their phone horizontally. 

I needed to remove this from the media query that checked if the width of the viewport was around 415 px because, otherwise, 
this code would never be executed. Remember that phones in horizontal mode have like 800px of width, so it would be way over
415 px wide, so this code wouldn't run.

Since none of this will be inside of the side navbar while in horizontal mode, I need to use the regular navbar class, 
NOT the side navbar class.*/
@media screen and (max-height: $horizontal-phone-height) {
  // .sidenavbar {padding-top: 15px;} /* My padding top is like 8px, so I don't currently need this */
  
  .navbar-small-link li {font-size: 18px;} /* This will decrease the font size of the navbar's small links  */

  .navbar .company-logo {
    font-size: 30px; /* This will decrease the logo's font size  */

    /* This will reduce the max width of the logo so that it can be kept as 2 lines of text, but it doesn't 
    appear below the navbar on iPhone 5 screens.  */
    max-width: 200px;
  } 

  /* This will vertically center the logo within the navbar  */
  li.company-logo {
    /* I wanted to use Sass' inheritance for this since this is code snippet is copied and pasted from above, but 
    Sass doesn't allow me to use inheritance within media queries*/
    line-height: $navbar-height;
    height: $navbar-height;

    line-height: 1.5;
    display: inline-block;
    vertical-align: middle; /* End of re-used code */
  }
} /* End of the styles for the side navbar */

/* This should make the hamburger menu icon to disappear on any device that's not a phone. This way, users won't be able 
to activate the side navbar in tablets nor in laptops/desktop computers. */
@media screen and (min-width: $tablet-min-width) {
  .hamburger-icon {
    display: none;
  }

  .closebutton {
    display: none;
  }

  /* This will make the small links for the side navbar to disappear on larger screens. */
  .sidenavbar-small-links {
    display: none;
  }
}

/* This will make the horizontal navbar links (which have a "li" tag) to disappear on phone screens. This is done to 
so that I don't have 8 navbar links inside of the side navbar.  */
@media screen and (max-width: $tablet-min-width) {
  .navbar-small-link {
    display: none;
  }
}

/* Styles for the part of the home page with a white background */

/* Styles that will affect both halves of the grid  */
.home-white-background {
  @extend %grid;  /* This will use Sass to call the snippet of code which contains the instructions on how to create a grid  */

  // text-align: center; /* This horizontally centers all of the content within their respective div */
}

/* Styles for the black title on the white background on the home page. 

These will be the styles for all h1 black titles.  */
.home-black-title {
  font-family: $title-font;
  // line-height: 1; /* This will reduce the default space between the 2 lines of text */

  /* This will execute in phones in vertical mode */
  @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    font-size: $h1-size-phones-vertical; /* This will make the font look big on small screens */
    padding-bottom: 7vh;  /* This will add padding below the title */

    /* I want more line height in phone screens for the multi-line title on the home page */
    line-height: 1.5;
  }

  /* This will execute in phones in horizontal mode */
  @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
    font-size: $h1-size-phones-horizontal; /* This will make the font look big on small screens */
    padding-bottom: 5vw;  /* This will add padding below the title */
  }

  /* For tablets. 
  
  I need to specify that the minimum height should be bigger than phones in horizontal mode, 
  or otherwise this code will overwrite the code of the styles for the phones in 
  horizontal mode. */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width)
  and (min-height: $horizontal-phone-height) {
    font-size: $h1-size-tablets; /* This will make the font look big on small screens */
    padding-bottom: 5vw;  /* This will add padding below the title */
  }

  // For computer screens
  @media only screen and (min-width: $computer-min-width) {
    font-size: $h1-size-computer; /* This will make the font look big on small screens */
    padding-bottom: 3rem;  /* This will add padding below the title */
  }

  // // For screens wider than 1536 px
  // @media only screen and (min-width: 1536px) {
  //   max-width: 400px;
  // }
}

/* This will create a 1x2 grid (1 row and 2 columns) which will contain the black title of the home page */
.black-title-container {
  @extend %grid;
}

/* Styles for the left half of the grid in the homepage's body */
.body-left-half {

  /* In laptop screens, this div will occupy 50% of the viewport width (source: 
  https://www.w3schools.com/css/tryit.asp?filename=trycss3_flexbox_responsive) */
  flex: 50%;

  // @media only screen and (min-width: $computer-min-width) {
  //   max-width: 50vw;
  //   // padding-left: $edge-body-padding; /* This adds 20px of left and right margin to the  */
  // }
}

/* Styles for the right half of the grid in the homepage's body */
.body-right-half {

  /* In laptop screens, this div will occupy 50% of the viewport width */
  flex: 50%;
}

/* Styles for the right half of the grid in the contact page's body */
.body-right-half-contact {

  /* This will add a gutter between the 2 halves of the body in the contact page in
  computer screens ... */
  @media only screen and (min-width: $computer-min-width) {
    padding-left: 3rem;
  } 
  
  flex: 50%;
}

/* This will add an internal padding between the text of the left half and the right 
half of the body of the contact page */
.body-left-half-padding-contact {
  padding-right: 3rem;
}

/* This will make both halves of the grid from the home page to be stacked one on top of the other in small screens 
(source: https://www.w3schools.com/css/tryit.asp?filename=trycss3_flexbox_responsive) */
@media (max-width: $computer-min-width) {
  .home-white-background {
    flex-direction: column;
  }

  .black-title-container {
    flex-direction: column;
  }
} /* End of the styles for the part of the home page with a white background */

/* This styles the gray paragraph text on all pages */
.gray-text {
  color: $gray-text;
  font-family: $arial-font;
  line-height: 1.5; // This will add more space between each line of text

  /* This will give the font a size of 20px in tablet and computer screens. I don't want this to be executed
  in horizontal phone screens. */
  @media only screen and (min-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    font-size: $gray-text-size;
  }

  /* This will fix a bug in which the default font size on iPhone 5S is of 20 px instead of 16px */
  // @media only screen and (max-height: $horizontal-phone-height) {
  //   font-size: 16px;
  // }

  /* This will only execute if two "p" tags are one right on top of the other (if 2 paragraphs 
  are one above the other.) This will add more spacing between each paragraph. (source:
  https://stackoverflow.com/questions/25234261/how-to-add-a-space-between-paragraphs-when-using-css-reset) */
  p + p {
        
    // For phone screens in vertical mode
    @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
      margin-top: 32px;
    }

    /* For phones in horizontal mode */
    @media only screen and (max-height: $horizontal-phone-height) {
      margin-top: 2.5rem;
    }
  
    /* For tablets. */
    @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width)
    and (min-height: $horizontal-phone-height) {
      margin-top: 2.5rem;
    }
  
    // For computer screens
    @media only screen and (min-width: $computer-min-width) {
      margin-top: 2.5rem;
    } 
  }
}

/* This styles the gray paragraph text on the contact page. I removed the "line height" property since it will be
overwritten by the "line height" of the "flexbox div" class, which would make the page slower. */
.gray-text-icons {
  color: $gray-text;
  font-family: $arial-font;

  /* This will give the font a size of 20px in tablet and computer screens. */
  @media only screen and (min-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    font-size: $gray-text-size;
  }

  p + p {
        
    // For phone screens in vertical mode
    @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
      margin-top: 32px;
    }

    /* For phones in horizontal mode */
    @media only screen and (max-height: $horizontal-phone-height) {
      margin-top: 2.5rem;
    }
  
    /* For tablets. */
    @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width)
    and (min-height: $horizontal-phone-height) {
      margin-top: 2.5rem;
    }
  
    // For computer screens
    @media only screen and (min-width: $computer-min-width) {
      margin-top: 2.5rem;
    } 
  }
}

/* This will add the styles for the titles of the iframes on the Portfolio page (h2 titles) */
.gray-iframe-titles {
  color: $gray-text-h2-titles;
  font-family: $title-font;

  /* H1 titles are of 4vh of size in phone screens, and of 4vw of size in computer 
  screens. So, I will make h2 titles smaller than those values.
  
  I will also add responsive padding between the paragraph text and the h2 title. 
  Don't use "%", since it makes the padding to be too large on computer screens, 
  even if the padding looks good on phone screens. I will use "vh" and "vw" instead.
  
  Also, I will include the dimensions of the iframe windows in here. */

  /* This will execute in phones in vertical mode */
  @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    
    // This needs to be under 4 vh or under 2 rem so that h2 titles are smaller than the h1 title
    font-size: $h2-size-phones-vertical; 
    padding-top: 5vh;

    /* Code for the iframes */
    iframe {
      /* This will add padding between the iframe title and the video */
      padding-top: 2vh;

      /* This will add padding between the video and the h2 title of the next video */
      padding-bottom: 2em;

      /* This will center the videos.
      
      If I will be occupying all of the width of the phone's screens, it's pointless to center
      the image, so I won't use this code any longer.*/
      // display: block;
      // margin-left: auto;
      // margin-right: auto;

      /* I will have to specify both the width and the height of the videos. A width value of 90% 
      looks good for the time being. 
      
      Upon further consideration, I will make the iframe video to occupy 100% of the width ofthe div that
      contains it (which already has 20 px of side margins), since iframes would look too small on 
      phone screens. So, to make it easier for the user to watch the videos, I will make the iframe
      as wide as possible on phone screens. 
      
      I will leave the height at 24 vh, since anything less than that would look too small on iPhone 5 
      screens.
      
      I will use another unit other than "vh" for the height since the iframe video looks too small on small
      screens.*/
      width: 100%;
      height: 15rem;
    }
  }

  /* This will execute in phones in horizontal mode */
  @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
    font-size: $h2-size-phones-horizontal;
    padding-top: 5vw; 

    iframe {
      padding-top: 2vw;
      padding-bottom: 2rem;

      /* This will center the videos */
      display: block;
      margin-left: auto;
      margin-right: auto;

      /* For the time being, I like how the proportions look like with a 60% width and a 30vw height.
      
      After further consideration, 60% of width looks too thin (or at least, on iPhone 5 screens.)
      Also, the "rem" unit seems to be better for the height, since it seems to scale better than 
      other units. */
      width: 75%;
      height: 18rem;
    }
  }

  /* For tablet screens (they are thin screens, so it's better to use "vh" as
    unit size.) This SHOULDN'T execute in phones in horizontal mode, or the titles
    would be too small */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width) 
  and (min-height: $horizontal-phone-height) {
    font-size: $h2-size-tablets; 
    padding-top: 4vh; 

    iframe {
      padding-top: 2vh;
      padding-bottom: 3rem;

      /* This will center the videos */
      display: block;
      margin-left: auto;
      margin-right: auto;

      /* For the time being, I like how the proportions look like with a 60% width and a 30vw height.
      
      I prefer using "rem" as a unit for the height, since it looks good on ipads in both vertical and horizontal
      mode. */
      width: 80%;
      height: 25rem;
    }
  }

  // For computer screens
  @media only screen and (min-width: $computer-min-width) {
    font-size: $h2-size-computer; 
    padding-top: 2vw; 

    iframe {
      padding-top: 2vw;
      padding-bottom: 3rem;

      /* This will center the videos */
      display: block;
      margin-left: auto;
      margin-right: auto;

      /* For the time being, I like how the proportions look like with a 60% width and a 30vw height.
      
      I prefer using "rem" as a unit for the height, since it looks good on ipads in both vertical and horizontal
      mode. */
      width: 60%;
      height: 25rem;
    }
  }
}

/* This will add vertical padding between the paragraph text and the image in the home page on phone and tablet screens   */
.text-image-padding-mobile {
  /* On tablets and phones on vertical mode */
  @media only screen and (max-width: $computer-min-width) and (min-height: $horizontal-phone-height) {
    padding-bottom: 9vw;
  }

  // In phone screens in horizontal mode
  @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
    padding-bottom: 9vh;
  }
}

/* This styles the picture of Nova's office front door */
.office-door {
  
  // height: 35vw;

  // justify-content: center;

  /* This will give add a padding to the top of the image in computer screens which is equivalent to the 
  biggest font size for the gray paragraph text. This will be done to make the image to be at the same height as the
  gray text that will be located to the left of the image. This should only happen when the white body is split into
  the 1x2 grid, which is on screens with at least 1080px of width.  */
  @media only screen and (min-width: $computer-min-width) {
    padding-top: 20px;
    padding-left: 10vw; 
    // padding-right: 4vw;

    width: 35vw;  /* This will make the size of the image to be responsive */
  }

  /* This will horizontally center the image to the center of the div (source: 
  https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_image_center) */
  @media only screen and (max-width: $computer-min-width) {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }

  /* The following two snippets of code will modify the size of the image on smaller screens */
  /* On tablets and phones on vertical mode */
  @media only screen and (max-width: $computer-min-width) and (min-height: $horizontal-phone-height) {
    width: 75vw; 
  }

  // In phone screens in horizontal mode
  @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
    width: 75vh;
  }
}

/* This will style the "Back To Top" link */
.back-to-top {
  font-family: $arial-font;
  // margin: $side-margins;

  /* This will give the font a size of 20px in tablet and computer screens. I don't want this 
  to be executed in phones in horizontal mode. */
  @media only screen and (min-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    font-size: $gray-text-size;
    margin: $side-margins-large; // This adds side margins of over 20px 
  }
  // cursor: pointer; // This should be in the "a" tag, NOT on the div containing it

  /* Styles for computer screens  */
  @media only screen and (min-width: $computer-min-width) {
    padding-top: 2vw;
  }

  /* The following two snippets of code will modify the padding of the link on smaller screens */
  // On phones on vertical mode 
  @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    padding-top: 15%;
    margin: $side-margins // This adds 20px of side margins
  }

  // On Tablets in vertical mode
  @media only screen and (max-width: $computer-min-width) and (min-width: $tablet-min-width) {
    padding-top: 5%;
    margin: $side-margins-large;
  }

  // In phone screens in horizontal mode
  @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
    padding-top: 5%;
    margin: $side-margins-large;
  }

  a {
    cursor: pointer; // This will only make hand icon appear if the user mosues over the link
  }
}

/* These are the styles for the footer text */
.footer-text {
  background-color: black;
  color: white;
  font-family: $arial-font;

  /* This adds a minimum of 20 px of side margins to the text. If I use margins instead of padding, I will get white space to the 
  sides of the footer instead of black space.
  
  I will make it responsive so that only small screens have 20px of side margins, whereas the rest of the screens will have 
  larger margins (or paddings.) */
  /* For phones in vertical mode */
  @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    padding: $side-margins;
  }

  /* For phones in horizontal mode */
  @media only screen and (max-height: $horizontal-phone-height) {
    padding: $side-margins-large;
  }

  /* For tablets. */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width)
  and (min-height: $horizontal-phone-height) {
    padding: $side-margins-large;
  }

  // For computer screens
  @media only screen and (min-width: $computer-min-width) {
    padding: $side-margins-large;
  } // End of side margin

  // padding: $side-margins;

  /* This will create a 1x5 grid, which will contain most of the footer text on computer and tablet screens. This will contain
  the social media icons and its respective title, and the links of the sitemap.
  
  I will only execute this on screens of at least 1280px of width (that is, on computer screens.) */
  @media only screen and (min-width: $computer-min-width) {

    /* This grid will create 1 row and 2 columns. The 1st column will have the "Follow us" text and the social media icons.
    Meanwhile, the 2nd column will have the entirety of the sitemap. */
    .grid-1x2-social-media {
      display: grid;  // This allows me to use the grid

      /* The first column will have a 20% width since I want to ultimately create a 1x5 grid, so the 1st column should
      occupy one fifth of the width of the entire grid container (it will contain the "Follow us" text) */
      grid-template-columns: 20% auto; 
      text-align: center; // This centers the text and the icons within their respective container within the grid
    }

    /* This will display the site map links into a 1x2 grid. The reason I'm doing this is since 3 of the site map links
    are already within a div, and the last 2 are in a different div. Since each div creates a column, the easiest solution
    is to reuse those divs as my columns. 
    
    And anyways, the last div has the "privacy policy" and "Terms and conditions"
    within one div, which is what I wanted to get the desired effect anyways.
    
    The 1st column will have the "Portfolio", "About" and "Contact" links. Meanwhile, the last column will have 
    the last 2 links. Since this is a container that will contain 4 columns, I want this container to follow the following 
    widths for the columns: three-fourths for the column containing the "Portfolio", "About" and "Contact" links, 
    and one-fourth for the last 2 links.
    
    So, I'll need to use widths of "75%" and "25%", respectively ("3/4" and "1/4".) */
    .grid-1x2-sitemap {
      display: grid;
      grid-template-columns: 75% 25%; 
    }

    /* Finally, this will divide the container with the "Portfolio", "About", and "Contact" links into 3 separate 
    columns. So, this will be a 1x3 grid. I could use "auto" or "33%" width, since I want each link to occupy one
    third of its parent container. */
    .grid-1x3-sitemap {
      display: grid;
      grid-template-columns: auto auto auto; 
    }
  }

  /* This adds black padding within the footer to add padding between "Follow us on social media" and the upper white edge 
  (the beginning of the footer) */
  .black-padding-div {
    padding-top: 1%;
  }

  /* This styles the biggest font size for the footer text */
  .footer-big-text {
    // For tablet and computer screens
    @media only screen and (min-width: $tablet-min-width) {
      font-size: $gray-text-size;
    }
    
  }

  /* This will be the footer text that will be centered */
  .centered-footer-text {

    // .copyright-info {
    //   /* The copyright info text needs to be centered on all screen sizes, not only on phones  */
    //   text-align: center;
    // }

    /* For phone screens in vertical mode (this will be for the "Follow us on social media" text). I want this 
    to apply as well for iPhone 5 screens in horizontal mode.
    
    For the time being, I want this to apply to all screens that are thinner than a tablet screen. I don't need 
    to specify a minimum nor a maximum screen height.
    
    I want this to also apply on tablet screens (of less than 1280px of width.) */
    @media only screen and (max-width: $computer-min-width) {
      text-align: center;
    }
  }

  /* Styles for the footer's copyright info */
  .copyright-info {
    line-height:2;  // This gives additional space between each line of text

    a {
      color: white; // This makes the underlined links to be white
    }

    font-size: small;
    text-align: center;
  }

  /* Styles for the site map */
  .sitemap {

    /* For all of the links (all of the site map's text) */
    a {
      text-decoration: none;  // This removes the underlines
      color: white;
      line-height: 3;

      /* Font size for tablet and computer screens. I will make it the same size as the "Follow us on social media" title.
      This way, both "Follow us" and the site map links will be perfectly algined in computer screens (the will appear 
      side-by-side in a 1x5 grid.) */
      @media only screen and (min-width: $tablet-min-width) {
        font-size: $gray-text-size;
      }
    }
    
    /* This will add padding between the site map links and the copyright info text in phone screens in vertical mode  */
    @media only screen and (max-width: $tablet-min-width) {
      padding-bottom: 4%;
    }

    /* This will add padding between the site map links and the copyright info text in tablet screens  */
    @media only screen and (max-width: $computer-min-width) {
      padding-bottom: 8%;
    }

    // /* This will add padding between the site map links and the copyright info text in computer screens  */
    // @media only screen and (min-width: $computer-min-width) {
    //   padding-bottom: 4%;
    // }

    /* I need this to create the 1x3 grid and the 1x2 that will contain the site map elements on phone screens (source: 
    https://www.w3schools.com/css/tryit.asp?filename=trycss_grid) */

    /* For phone screens in vertical mode and iPhone 5 in horizontal mode. This should execute on screens of any height size. */
    @media only screen and (max-width: $tablet-min-width) {
      /* This is the 1x3 grid */
      .grid-1x3 {
        display: grid;  // This allows me to use the grid
        /* This will create a 1x3 grid (1 row, 3 columns). I made the center rectangle of the grid to have 30% of the width
        since it makes the site map to look more organized (with the "About" section taking one 3rd of the width of the grid.) */
        grid-template-columns: auto 30% auto; 
        
        /* This will center the "About" link on phone screens */
        .about-centered {
          text-align: center;
        }

        /* This will align the "Contact" link to the right edge of the screen on phones */
        .contact-right-aligned {
          float: right;
        }
      }

      /* This is the 1x2 grid that will contain the "Privacy" and "Terms" links in phone screens wider than iPhone 5 
      screens (320px of width) */
      @media only screen and (min-width: $wider-than-iphone5-min-width) {
        .grid-1x2 {
          display: grid;  // This allows me to use the grid
          grid-template-columns: auto auto; /* This creates the 1x2 grid */
          text-align: center;
        }
      }
      // This will display the "Privacy" and "Terms" links one on top of the other on iPhone 5 screens
      @media only screen and (max-width: $wider-than-iphone5-min-width) {
        .grid-1x2 {
          text-align: center;
        }
      }

      // div {
      //   text-align: center; // This will center each link to the center of their respective div
      // }
    }
  }
}

/* This will create the 1x5 grid which will contain all of the sitemap links for tablet screens only
(for screens between 767 px and 1279 px).

Due to the amount of divs that I used in my html code, I will have to create 3 grids in here: a giant 1x2 grid,
a small 1x3 grid, and a small 1x2 grid. 

The 1x2 grid will contain everything. The 1x3 grid will contain "Portfolio", "About", and "Contact". Finally, the last 1x2 
grid will contain the "Privacy" and "Terms" links, and will add it to the 2nd column of the giant 1x2 grid. */
@media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width) {
  .sitemap-grid-1x5-tablets-part-1 {
    display: grid; 
    grid-template-columns: auto auto; /* This creates the giant 1x2 grid */
    text-align: center;
  }

  .sitemap-grid-1x5-tablets-part-2 {
    display: grid; 
    grid-template-columns: auto auto auto; /* This creates the small 1x3 grid */
    text-align: center;
  }

  .sitemap-grid-1x5-tablets-part-3 {
    display: grid; 
    grid-template-columns: auto auto; /* This creates the small 1x2 grid */
    text-align: center;
  }
}

/* This will add responsive padding between the site map and the copyright information in the footer. I could use either 
padding bottom or top */
.sitemap-copyright-padding {
  // For phone screens. I don't want this to be executed on iPhone 5 nor older in horizontal mode
  @media only screen and (min-height: $iphone-se-max-height-horizontal) and (max-width: $tablet-min-width) {
    padding-bottom: 20%; 
  }
}

/* This styles the social media icons in the footer */
.social-media-footer {
  /* These 3 lines of code will center both icons to the center of the screen */
  /* In phone screens in vertical mode, and iPhones in horizontal mode. 
  
  If I want to put code for iPhone 5 screens in horizontal mode, then I need to specify the MAXIMUM height that will make 
  this code execute. There's no point in specifying a minimum height if I want to execute code on screens with a really 
  low height, since that would make this code execute in most screens (both large and small).
  
  Since I want to center the social media icons to the center of the whole footer in all screens that thinner than 
  a tablet, there's no point in specifying a minimum nor a maximum height. 
  
  I want this to also be executed on tablet screens that are smaller than 1280 px of width. */
  @media only screen and (max-width: $computer-min-width) {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  /* This will remove the underlines that would appear below the social media icons once I insert the link to Nova's
  FB and YouTube pages into the icon images */
  a {
    text-decoration: none;
  }

  /* This will directly affect the social media icon images */
  img {
    /* From what I've read from the brand guidelines from both Facebook and YouTube, it seems that both icons need to have 64x64 
    px as their dimensions. Also, the distance between the Youtube icon and anything surrounding it should be of at least the 
    size of the triangle of the "play" icon within the YouTube icon, which is of 11x12 px.
    
    After further reading, the only minimum height that I needed to use was of 20px of height for the YouTube icon. Facebook's
    icon can be of any size, as long as it's as big as the other social media icons. So, I don't have to use a 64x64 size for 
    both social media icons.
    
    So, I will add 12 px (the largest dimension of the YouTube triangle) as the padding that should surround the Youtube icon,
    as well as for the FB icon. 
    
    This will be for phone screens, since phone screens could have font sizes that are smaller than 12 px. So, the "Follow
    us" text would have less than 12px of padding below it, so it would be too close to the social media icons, violating
    YouTube's brand guidelines.
    
    However, this will never happen in computer screens, since I'm not planning on using font sizes of less than 12px
    in computer screens, so I don't need the extra padding between "Follow us" and the icons. Besides, if I have
    "padding top" for the social media icons in computer screens, the "Follow us" text would bein a higher position 
    than the site map links, so the text would look disorganized.
    
    I will also specify the size of the icons in here. */

    // In phone screens in vertical mode and on iPhone 5 in horizontal mode
    @media only screen and (max-width: $tablet-min-width) {
      padding: 12px;

      // Icon size
      // height: $social-media-icon-small;
      // width: $social-media-icon-small;
    }

    // In tablet and computer screens
    @media only screen and (min-width: $tablet-min-width) {
      padding: 0 12px 12px;

      // Icon size
      // height: $social-media-icon-large;
      // width: $social-media-icon-large;
    }

    /* In screens smaller than a computer (1279 px of width and under.) This will make social media icons to have a 
    size of 50x50px on these small screens. */
    @media only screen and (max-width: $computer-min-width) {
      // Icon size
      height: $social-media-icon-small;
      width: $social-media-icon-small;
    }

    /* In computer screens. This will make social media icons to have a size of 64x64px on these large screens. */
    @media only screen and (min-width: $computer-min-width) {
      // Icon size
      height: $social-media-icon-large;
      width: $social-media-icon-large;
    }
  }

  /* This will add padding between the social media icons and the site map links in phone screens in vertical mode */
  @media only screen and (max-width: $tablet-min-width) { 
    padding-bottom: 12%;
  }

  /* This will add padding between the social media icons and the site map links in tablets */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width) { 
    padding-bottom: 8%;
  }

  /* This will add padding between the social media icons and the site map links in computer screens */
  @media only screen and (min-width: $computer-min-width) { 
    padding-bottom: 12%;
  }
}

/* DELETE LATER: This is a copy/paste version of the original cookie Consent Banner*/
/* Cookie consent banner CSS. Taken from: https://github.com/Godsont/Cookie-Consent-Banner/edit/master/style.css */
/* I modified the CSS so that it only affects the Cookie consent banner, but the cookie consent banner's CSS is
 not being modified by this. It's being modified by Bootstrap. */
 .cookie-container {
  font-family: $arial-font;
}

.cookie-container p {
  margin: 24px 0;
  line-height: 2;
}

.cookie-container {
  position: fixed;
  bottom: -200%;
  left: 0;
  right: 0;
  background: #2f3640;
  color: #f5f6fa;

  /* This will add a minimum padding of 20 px to the sides of the cookie banner. 
  However, in larger screens, the padding will be of a maximum of 32 px. */
  // For phone screens (in both vertical and horizontal mode)
  @media screen and (max-width: $tablet-min-width) {
    padding: 0 20px;
  }

  // For screens larger than phones
  @media screen and (min-width: $tablet-min-width) {
    padding: $side-margins-large;
  }

  box-shadow: 0 -2px 16px rgba(47, 54, 64, 0.39);

  transition: 400ms;
}

.cookie-container.active {
  bottom: 0;
  /* This will make the text super small so that the cookie container is small in phones
  in horizontal mode */
  @media only screen and (max-height: $iphone5-max-height-horizontal) {
    font-size: 10px;
  }

  /* I will also put that same font size in iPhone 5 screens in vertical mode to try to prevent 
  a bug in which, if the user goes from vertical mode to horizontal mode, and the naback to vertical 
  mode, the text becomes too large, so the cookie banner occupies the whole screen, and the "terms"
  link is not visible.*/
  @media only screen and (max-width: $iphone5-max-height-horizontal) {
    font-size: 10px;
  }
}

.cookie-container a {
  color: #f5f6fa;
}


.cookie-btn {
  background: blue;
  border: 0;
  color: #f5f6fa;
  padding: 12px 48px;
  font-size: 18px;
  margin-bottom: 16px;
  border-radius: 2px;
  cursor: pointer;
  font-family: $arial-font;
}
/* End of CSS of the cookie consent banner. */

/* This will add a minimum of 20 px of side margins to most of the content of the Portfolio page */
.body-side-margins {
  
  /* For phones in vertical mode */
  @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    margin: $side-margins;
  }

  /* For phones in horizontal mode */
  @media only screen and (max-height: $horizontal-phone-height) {
    margin: $side-margins-large;
  }

  /* For tablets. */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width)
  and (min-height: $horizontal-phone-height) {
    margin: $side-margins-large;
  }

  // For computer screens
  @media only screen and (min-width: $computer-min-width) {
    margin: $side-margins-large;
  }
}

/* Styles for the About page image */
.office-interior {

  /* For phones in vertical mode */
  @media only screen and (max-width: $tablet-min-width) 
  and (min-height: $horizontal-phone-height) {
    width: 100%;
    
    /* This will horizontally center the image to the center of the div.
    
    I technically don't need this if the image occupies 100% of the width
    of the div. However, in Safari in iPhone 5S, the image doesn't occupy
    the whole width of the div, but the image still gets centered 
    (thanks to this snippet of code.) */
    display: block;
    margin-left: auto;
    margin-right: auto;

    /* This will add more padding between the image and the last 
    paragraph */
    padding-top: 2rem;
  }

  /* For phones in horizontal mode */
  @media only screen and (max-height: $horizontal-phone-height) {
    width: 30rem;

    display: block;
    margin-left: auto;
    margin-right: auto;

    padding-top: 2rem;
  }

  /* For tablets. */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width)
  and (min-height: $horizontal-phone-height) {
    width: 30rem;

    display: block;
    margin-left: auto;
    margin-right: auto;

    /* I don't need this on tablets, since there's a div called "text-image-padding-mobile",
    which is already adding a ton of padding between the image and the text
    on tablets. */
    // padding-top: 1rem;
  }

  // For computer screens
  @media only screen and (min-width: $computer-min-width) {

    /* This will give add a padding to the top of the image in computer screens which is equivalent to the 
    biggest font size for the gray paragraph text. This will be done to make the image to be at the same 
    height as the gray text that will be located to the left of the image. This should only happen when the 
    white body is split into the 1x2 grid, which is on screens with at least 1080px of width.  */
    padding-top: 20px;

    padding-left: 10vw; 
    width: 35rem;  /* This will make the size of the image to be responsive */
  }

  /* This will give add a padding to the top of the image in computer screens which is equivalent to the 
  biggest font size for the gray paragraph text. This will be done to make the image to be at the same height as the
  gray text that will be located to the left of the image. This should only happen when the white body is split into
  the 1x2 grid, which is on screens with at least 1080px of width.  */
  // @media only screen and (min-width: $computer-min-width) {
  //   padding-top: 20px;
  //   padding-left: 10vw; 
  //   // padding-right: 4vw;

    
  //   width: 35vw;  /* This will make the size of the image to be responsive */
  // }

  /* This will horizontally center the image to the center of the div */
  // @media only screen and (max-width: $computer-min-width) {
  //   display: block;
  //   margin-left: auto;
  //   margin-right: auto;
  // }

  /* The following two snippets of code will modify the size of the image on smaller screens */
  /* On tablets and phones on vertical mode */
  // @media only screen and (max-width: $computer-min-width) and (min-height: $horizontal-phone-height) {
  //   width: 75vw; 
  // }

  // In phone screens in horizontal mode
  // @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
  //   width: 75vh;
  // }
}

/* These are the styles for the business hours */
/* This will remove the top margin between the lines of text containing the business hours */
#business-hours-top {
  p {
    margin-top: 0px;
  }
}

/* This will remove the bottom margin between the paragraphs containing the busines hours. */
.business-hours-bottom {
  margin-bottom: 0px;
} /* End of the styles for the business hours */

/* These are the styles for the contact information h2 title */
.contact-information-title {
  color: $gray-text-h2-titles;
  font-family: $title-font;

  /* To make the space between this h2 title and the line of text with the phone number to be the same as the 
  space between each line of text with the rest of the contact information, I need to first remove the
  margin at the bottom of this title (for all screens) */
  h2 {

    /* This will remove all margin bottom from the h2 title in phone screens in vertical mode so
    that he space between the h2 title and the 1st icon is the same as the space between the 2nd
    icon and the 3rd icon, and so on and so forth for the rest of the icons */
    @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
      margin-bottom: 0;
    }

    /* For phones in horizontal mode (from iphone 5 and on) */
    @media only screen and (min-width: $iphone5-max-height-vertical) and (max-height: $horizontal-phone-height) {
      margin-bottom: 0;
    }

    /* I want to add more space between the h2 title and the first icon, but only for screens 
    larger than a phone */
    @media only screen and (min-width: $tablet-min-width) and (min-height: $horizontal-phone-height)  {
      margin-bottom: 2rem;
    }
    
    /* This will modify the margin top for the title for computer screens so that the title is at the 
    same height as the paragraph that is to the left of the title */
    @media only screen and (min-width: $computer-min-width) {
      margin-top: $font-size-large-screens;
    }
  }

  /* For phones in vertical mode */
  @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
    
    // This needs to be under 4 vh or under 2 rem so that h2 titles are smaller than the h1 title
    font-size: $h2-size-phones-vertical; 
    padding-top: 5vh;

    /* This is for adding padding between the title and the line of text with the phone number */
    padding-bottom: $font-size-small-screens;
  }

  /* For phones in horizontal mode */
  @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
    font-size: $h2-size-phones-horizontal;
    padding-top: 5vw;
    padding-bottom: $font-size-small-screens; 
  }

  /* For tablet screens */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width) 
  and (min-height: $horizontal-phone-height) {
    font-size: $h2-size-tablets; 
    padding-top: 4vh;
    padding-bottom: $font-size-large-screens; 
  }

  // For computer screens
  @media only screen and (min-width: $computer-min-width) {
    font-size: $h2-size-computer;
    padding-bottom: $font-size-large-screens;

    // padding-top: 2vw; 
  }
}

/* Styles for the lines of text which will contain the contact info and their respective icons (source: 
https://www.w3schools.com/css/tryit.asp?filename=trycss3_flexbox_flex-wrap_nowrap8)   */
.flex-div {
  div {
    display: flex;
  }

  /* For iPhone 5S in vertical mode */
  // @media only screen and (max-width: $wider-than-iphone5-min-width) and (min-height: $horizontal-phone-height) {
  //   .location-icon {
  //     /* This will make the location icon to look vertically centered with respect to the multi-line
  //     block of text that accompanies it */
  //     align-items: center;
  //   }
  // }
  
  /* These snippets of code will vertically center the lines of text with respect to their respective icon */
  /* For iPhone 5S in vertical mode */
  @media only screen and (max-width: $wider-than-iphone5-min-width) and (min-height: $horizontal-phone-height) {
    .one-line-description {
      /* This will be for the contact info lines that only occupy one line of text */
      line-height: $contact-icon-size-small-screens;
    }

    .location-icon {
      /* This will make the location icon to look vertically centered with respect to the multi-line
      block of text that accompanies it */
      align-items: center;
    }

    // .location-icon {
    //   /* This will make the location icon to look vertically centered with respect to the multi-line
    //   block of text that accompanies it */
    //   padding-top: 23px;
    // }
  }
  
  /* For any other phones in vertical mode */
  @media only screen and (min-width: $wider-than-iphone5-min-width) and (max-width: $tablet-min-width) 
  and (min-height: $horizontal-phone-height) {
    .one-line-description {
      /* This will be for the contact info lines that only occupy one line of text */
      line-height: $contact-icon-size-small-screens;
    }

    .multi-line-description {
      /* This will make the 2-line block of text from Nova's address to look vertically centered with 
      respect to the location icon */
      display: flex;
      align-items: center;
      
      // padding-top: 3px;
    }
  }

  // For iPhone 5S in horizontal mode
  @media only screen and (max-width: $higher-than-iphone5-min-height) and (max-height: $horizontal-phone-height) {
    .one-line-description {
      line-height: $contact-icon-size-small-screens;
    }

    .multi-line-description {
      /* On these screens, the block of text with the address will 
      have 2 lines. I SOULDN'T use line-height. Instead, I will 
      add padding top to try to center the text with respect to the 
      location icon. */
      // padding-top: 2px;

      /* This will force the font size ofthe address to be of the same
      size of the rest of the text of the page */
      font-size: 16px;
      // line-height: $contact-icon-size-small-screens;
    }

    .location-icon {
      align-items: center;
    }
  }


  /* For other phones in horizontal mode */
  @media only screen and (min-width: $higher-than-iphone5-min-height) and (max-width: $computer-min-width) 
  and (max-height: $horizontal-phone-height) {
    .one-line-description {
      line-height: $contact-icon-size-small-screens;
    }

    .multi-line-description {
      /* On these screens, the block of text with the address will 
      always have only 1 line of text. So, I will center it just
      like the lines of text with the "one line description" class. */
      line-height: $contact-icon-size-small-screens;
    }
  }

  /* For tablet screens */
  @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width) 
  and (min-height: $horizontal-phone-height) {
    line-height: $contact-icon-size-large-screens;
  }

  // For computer screens
  @media only screen and (min-width: $computer-min-width) {
    .one-line-description {
      line-height: $contact-icon-size-large-screens;
    }

    .multi-line-description {
      /* This will vertically center the address text in all computer screens,
      regardless of whether the block of text is of 1 or 2 lines of text.  */
      display: flex; 
      align-items: center;
    }
  }
}

/* Styles for the icons on the Contact page */
.contact-icons {
  img {
    /* For phones in vertical mode */
    @media only screen and (max-width: $tablet-min-width) and (min-height: $horizontal-phone-height) {
      height: $contact-icon-size-small-screens;
      width: $contact-icon-size-small-screens;
  
      padding-top: $font-size-small-screens;
      padding-bottom: $font-size-small-screens;

      /* This will add horizontal padding between the icon and its respective line of text */
      padding-right: 1rem;
    }

    /* For phones in horizontal mode */
    @media only screen and (max-width: $computer-min-width) and (max-height: $horizontal-phone-height) {
      height: $contact-icon-size-small-screens;
      width: $contact-icon-size-small-screens;
  
      padding-top: $font-size-small-screens;
      padding-bottom: $font-size-small-screens;
      padding-right: 1rem;
    }

    /* For tablet screens */
    @media only screen and (min-width: $tablet-min-width) and (max-width: $computer-min-width) 
    and (min-height: $horizontal-phone-height) {
      height: $contact-icon-size-large-screens;
      width: $contact-icon-size-large-screens;
  
      padding-top: $font-size-large-screens;
      padding-bottom: $font-size-large-screens;
      padding-right: 1rem;
    }

    // For computer screens
    @media only screen and (min-width: $computer-min-width) {
      height: $contact-icon-size-large-screens;
      width: $contact-icon-size-large-screens;
  
      padding-top: $font-size-large-screens;
      padding-bottom: $font-size-large-screens;
      padding-right: 1.5rem;
    }
  }
}

// footer {
//   margin-bottom: auto;
// }

  
/* This will make all of the navbar elements to go to the far right of the screen, with the exception of the
"Nova Video Productions" title */
/* .navbar li {
    float: left;
} */
/* This will remove the underline and the blue color of the text of the navbar links if the user hasn't clicked on them.
Only the current page should have an underline (thanks to the <u> tags that I added on the html files.) */
/* .navbar a:link {
    color: white;
    text-decoration: none;
} */
/* This will remove the underline and the blue color of the text of the navbar links after the user clicks on them. */
/* .navbar a:visited {
    color: white;
    text-decoration: none;
} */