/* This variable will store the height of the div that contains the navbar. I may change this to "vh" or "vw" units
to make it responsive. */
/* This will make the <body> tag to occupy the entire screen, and will remove all margins from it. This way, there won't
be any white borders surrounding the body nor the image if the landing page.
Source: https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_div_full_height */
html, body {
  height: 100%;
  /* This fixed the bug that made the html and body tag to be 17 px thinner than the actual viewport width, but
  it creates a horizontal overflow, for some reason */
  margin: 0;
}

/* This modifies the styles of the landing page (the top of the home page, the part of the page the user
will see when they first enter the website). 

The movie reel image needs to be here*/
#landing-page {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  /* This will add the landing page image. I needed to use the "linear gradient" property and put
  the "rgba" attribut twice to put the black mask. Otherwise, I would get either a white screen, or the
  black mask would never appear. 
  Source: https://css-tricks.com/tinted-images-multiple-backgrounds/ */
  background: linear-gradient(rgba(0, 0, 0, 0.65), rgba(0, 0, 0, 0.65)), url(../img/landing-page-bg.jpg);
  /* This makes the images to be resized so that it fits the browser window. 

  In order for the image to appear in the proper size and not get cropped on a laptop screen, I need to manually specify
  the size screen. I can't use "100%". And anyways, even if I used "100%", the image would get cropped or would get
  repeated and look bad in all other screen sizes anyways.

  I will use media queries to make the movie reel image to look well on different screen sizes.

  The image is no longer zoomed-in in a lptop screen of 1366px of width if I use "100% 100%" as the width and height
  of the image in the "background-size" property. */
  /* background-color: black; */
  /* This will make the landing page div to be the same height and width of the <body> tag. */
  height: 100%;
  /* For smartphone screens. If I set the height of the image to 100%, and I set "px" units to its
  width, I will get more or less the effect that I want for smaller screens.

  I need to find out if there's a way to the image horizontally so that I get the specific portion of the image
  that I want to show.

  This only works as intended if I put this below the "height" property (source: 
  https://www.w3schools.com/cssref/pr_background-position.asp .) */
  /* For tablet screens with a min width of 768px and a max width of 800px.

  I choose 1024px since, if you multiply 728 times 2, you get 1536. Now, a third of 1536 is 512. If you subtract
  512 to 1536 you get 1024px. That is, if you stretch the image to be double of an iPad screen, and then you subtract
  a third of it, that's what will be shown on tablet screens. 

  If I showed only half of the image, it wouldn't look good. I decided to show two-thirds of the image to make it look good. */
}
@media only screen and (min-width: 801px) {
  #landing-page {
    background-size: 100% 100%;
  }
}
@media only screen and (max-width: 767px) {
  #landing-page {
    background-position: right 5%;
    background-size: 1000px 100%;
  }
}
@media only screen and (min-width: 768px) and (max-width: 800px) {
  #landing-page {
    background-position: right 0;
    background-size: 1024px 100%;
  }
}

/* Style sheet of the "Check our Portfolio" button */
#portfolio-button {
  color: white;
  /* This adds a white border to the button */
  border: 1px solid white;
  /* This makes the interior of the button to be transparent  */
  background-color: transparent;
  /* This makes a hand appear when the user hovers the mouse over the button */
  cursor: pointer;
  /* This will add rounded corners to the button */
  border-radius: 5px;
  padding: 15px;
  font-size: 24px;
  /* I will temporarily add a margin at the bottom of the button so that I can see how the white border looks
  on a black screen (the default background color of the page is white) */
  margin-bottom: 10px;
  /* text-align: center; */
}

/* This will center the "Check our portfolio" button. Source: 
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_center-flex_btn */
.center-content {
  display: flex;
  justify-content: center;
  align-items: center;
  /* This will remove any padding that the button would add that would otherwise prevent the h1 title from being at
  the center of the landing page. With this I'll be able to move around the button on the "landing page" div. */
  position: absolute;
  /* By modifying the bottom, top, left and right properties, I should be able to move the button towars the bottom
  of the screen (source: https://stackoverflow.com/questions/36191516/center-and-bottom-align-flex-items .)

  I will make it responsive, so I need to remove the "px" value and use a responsive value (like vh or vw .) */
  bottom: 8vh;
}

/* This should move the "check our portfolio button" to the center of the page */
/* div#portfolio-button {
    text-align: center;
} */
/* This will change the color of the "check our portfolio" button to white if the user moves the mouse over it. */
#portfolio-button:hover {
  background-color: white;
  color: black;
}

/* This styles the h1 title of the homepage */
#home-title {
  color: white;
  /* This sets the font to Arial */
  font-family: Arial, Helvetica, sans-serif;
  /* The unit "vw" or "vh" will make the text size to be responsive. This way, the text will automatically become smaller 
  in smaller screens.

  I will most likely make the text change based on the browser height instead of its width, since I want the movie reel
  image to occupy the entire height of the viewport when the users 1st enter the page, so I want the text to have its
  size to look big when they 1st enter the homepage. 

  With a font size of 1.5vh, the title text looks good on most screen sizes, with the onluy exception of laptop screens.
  So, I will use a media query, and use a "2vw" on screens larger than tablets so that the text looks big enough
  in laptop screens.*/
  /* This will make it so that the title of the homepage is divided into 3 lines in the desktop version of the page.
  Source: https://jsfiddle.net/hr6hq7uj/1/ */
  /* max-width: 650px;
  display: inline-block; */
}
@media only screen and (max-width: 1299px) {
  #home-title {
    font-size: 1.5vh;
  }
}
@media only screen and (min-width: 1300px) {
  #home-title {
    font-size: 1.8vw;
  }
}

/* This only affects the div that contains the h1 title of the homepage. */
div#home-title {
  /* This will add a padding to the top of the div so that there is enough space between the navbar and the h1
  title. It needs to be responsive, since different screen sizes will need different padding values. Also, 
  with this, I'll be able to remove the temporary "br" tags that I used on index.html. 

  Since what will ultimately tell me how much padding I'll need is the height of the viewport, I'll use "vh"
  as the measuring unit.*/
  /* This will make it so that the title of the homepage is divided into 3 lines in the desktop version of the page, 
  by reducing the size of the div container that contains the h1 title.
  Source: https://jsfiddle.net/hr6hq7uj/1/ 

  I need to use media queries in this in order to have control in the number of words that will appear
  per line for the h1 title on different screen sizes. 800px is ok for screens with 1366px of width, whereas
  900px is ok for screens of 1536px of width.*/
  /* This moves aligns the text to the center of the div container. */
  text-align: center;
  /* This will make it so that the h1 title remains at the center of the "landing page" div. Tha is, the 
  h1 title will be centered both vertically and horizontally. */
  display: flex;
}
@media only screen and (min-width: 1536px) {
  div#home-title {
    max-width: 1100px;
  }
}
@media only screen and (max-width: 1366px) {
  div#home-title {
    max-width: 980px;
  }
}

/* This should remove all text decoration (underlines and blue text) for the navbar elements without needing to 
put 2 CSS selectors for the unvisited and the visited links. */
.navbar li a {
  text-decoration: none;
  color: white;
  /* This should change the font of the navbar elements to Kameron */
  font-family: "Kameron", serif;
  /* This will add some padding to the navbar so that the main title of the landing page is way below the navbar.
  The minimum horizontal padding that must exist between the navbar elements on the edges of the navbar and the left and
  right margins should be of 20px (the 2nd parameter in "padding").
  Source: https://www.w3schools.com/css/tryit.asp?filename=trycss_navbar_horizontal_gray . 

  After further consideration, and by looking at my wireframes, it would be better to reduce the vertical padding from
  15px so that the navbar is closer to the top edge of the browser. And ideally, this should be responsive, and I shouldn't
  be using "px". However, for the time being, I may leave the vertical padding with "px" units. 

  To perfectly align the small navbar elements with the Nova logo, I need to remove any vertical padding from the navbar, 
  so I'll make the 1st parameter of the padding 0. */
  display: block;
  padding: 0 20px;
}

/* This should arrange all elements of the navbar horizontally, that is, so that they are each to the side of the other  */
.navbar li {
  /* This turns a vertical list into a horizontal one */
  /* display: inline; */
  /* If I don't use "display inline", this will turn a vertical lsit into a horizontal one, but the navbar
  elements will be in the reverse order */
  float: right;
}

/* This also modifies the style sheets of the navbar elements. */
.navbar ul {
  /* This removes the bullet points from the navbar elements */
  list-style-type: none;
  /* This removes the padding that was to the left of the "Nova Video Productions" title on the navbar */
  padding-left: 0;
  /* This fixes a bug in which there was a vertical overflow in which a white rectangle appeared at the top of the 
  screen on the web browser, just above the navbar */
  margin: 0;
}

/* This will modify the CSS of the "Nova Video Productions" title in the navbar */
.navbar .company-logo {
  /* This makes the title to go to the far left of the navbar */
  float: left;
  font-size: 35px;
  /* This will make it so that "Productions" appears below "Nova Video". I can't use "display: inline-block" because
  it will have a conflict with the "float: left" from above.
  Source: https://jsfiddle.net/hr6hq7uj/1/ */
  max-width: 255px;
  /* display: inline-block; */
}

/* This will modify the style sheets of the small navbar links to other pages. */
.navbar-small-link li {
  font-size: 25px;
  /* This vertically centers the small navbar links (source: 
  https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_center-vertical .) 

  BUG: The problem is that all of the small elements are piled on top of each other, and are located
  right on top of the Nova logo. I need to separate them, and align them towards the right side of the screen.  */
  /* This vertically centers the small navbar elements inside of the navbar without any bugs
  (source: Michiel van Oosterhout from https://stackoverflow.com/questions/8865458/how-do-i-vertically-center-text-with-css .)

  I need to put the line-height property as the same height of the navbar div so that all of the small navbar links are
  vertically centered. */
  line-height: 88px;
  text-align: center;
}

.navbar {
  /* This will allow me to move around the navbar elements, and to prevent them from adding additional padding
  that would prevent the h1 title from being vertically aligned (source: 
  https://stackoverflow.com/questions/36191516/center-and-bottom-align-flex-items .) */
  position: absolute;
  width: 100%;
  /* I may need to use "vh" or "vw" units for the height of the div in order to make the navbar height responsive */
  height: 88px;
  /* By using "bottom", "top", "left" and "right", I'll be able to move the navbar around the landing page screen.

  EDIT LATER*/
  top: 0;
}

/* This will make all of the navbar elements to go to the far right of the screen, with the exception of the
"Nova Video Productions" title */
/* .navbar li {
    float: left;
} */
/* This will remove the underline and the blue color of the text of the navbar links if the user hasn't clicked on them.
Only the current page should have an underline (thanks to the <u> tags that I added on the html files.) */
/* .navbar a:link {
    color: white;
    text-decoration: none;
} */
/* This will remove the underline and the blue color of the text of the navbar links after the user clicks on them. */
/* .navbar a:visited {
    color: white;
    text-decoration: none;
} */

/*# sourceMappingURL=styles.css.map */
